class GLUE_STRINGS:
    GLUE_START_MSG = "Glue Job {0} started."
    GLUE_SUCCESS_MSG = "Glue Job {0} completed."
    GLUE_FAILED_MSG = "Glue Job {0} failed, check the logs for more details."


def get_spark_connection_details(conn_details: dict) -> dict:
    """
    | Returns a dictionary containing the JDBC URL and connection properties for a Spark connection to MySQL.

    :param dict conn_details: dictionary produced by boto3_utils.get_mysql_conn_details_password().
    :returns: dictionary - {
        'jdbc_url': string,
        'connection_properties': dict - {
            'user': string,
            'password': string,
            'driver': string,
            'ssl': string
        }
    }
    """

    jdbc_url = f"""jdbc:mysql://{conn_details["hostname"]}:{conn_details["port"]}/{conn_details["schema"]}\
?useSSL=true&verifyServerCertificate=false&requireSSL=false"""
    connection_properties = {
        "user": conn_details["username"],
        "password": conn_details["password"],
        "driver": "com.mysql.cj.jdbc.Driver",
        "ssl": "false"
    }

    return {
        "jdbc_url": jdbc_url,
        "connection_properties": connection_properties
    }


def execute_spark_query(spark, jdbc_url: str, connection_properties: dict, query: str):
    """
    | Executes a SELECT query on a MySQL database and loads data into a Spark DataFrame.
    | Raises RuntimeError if an error occurs during the query execution.

    :param GlueContext.spark_session spark: spark session object.
    :param string jdbc_url: JDBC URL.
    :param dict connection_properties: connection properties generated by get_spark_connection_details().
    :param string query: query to execute.
    """

    try:
        return spark.read.jdbc(url=jdbc_url, table=query, properties=connection_properties)
    except Exception as e:
        error_message = f"An error occurred while executing the query: {e}"
        raise RuntimeError(error_message)
